Grammar

    0 $accept: program $end

    1 program: block

    2 block_begin: BEGIN_CURLY_BRACKET

    3 block_end: END_CURLY_BRACKET

    4 block: block_begin statement_list block_end

    5 statement_list: statement_list statement
    6               | statement

    7 statement: conditional_statement
    8          | loop_statement
    9          | print_statement
   10          | equal_statement
   11          | vec_statement
   12          | scl_statement

   13 if_begin: IF expr

   14 conditional_statement: if_begin block

   15 loop_begin: LOOP expr

   16 loop_statement: loop_begin block

   17 print_statement: PRINT STRING COLON argument_list SEMICOLON

   18 argument_list: argument_list COMMA expr
   19              | expr

   20 equal_statement: IDENTIFIER EQUAL expr SEMICOLON
   21                | IDENTIFIER COLON index EQUAL expr SEMICOLON

   22 vec_statement: VEC IDENTIFIER BEGIN_CURLY_BRACKET NUMBER END_CURLY_BRACKET SEMICOLON

   23 scl_statement: SCL IDENTIFIER SEMICOLON

   24 expr: add_expr
   25     | mul_expr
   26     | sub_expr
   27     | div_expr
   28     | index_expr
   29     | vector
   30     | prod_expr
   31     | NUMBER
   32     | BEGIN_PARANTHESIS expr END_PARANTHESIS
   33     | IDENTIFIER

   34 add_expr: expr ADD expr

   35 mul_expr: expr MUL expr

   36 div_expr: expr DIV expr

   37 sub_expr: expr SUB expr

   38 index_expr: expr COLON expr

   39 index: NUMBER
   40      | IDENTIFIER

   41 prod_expr: vector AT vector
   42          | vector AT IDENTIFIER
   43          | IDENTIFIER AT vector
   44          | IDENTIFIER AT IDENTIFIER

   45 vector: BEGIN_SQUARE_BRACKET num_list END_SQUARE_BRACKET

   46 num_list: num_list COMMA NUMBER
   47         | NUMBER


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    COMMA (258) 18 46
    COLON (259) 17 21 38
    PRINT (260) 17
    LOOP (261) 15
    SCL (262) 23
    VEC (263) 22
    NUMBER (264) 22 31 39 46 47
    IDENTIFIER (265) 20 21 22 23 33 40 42 43 44
    ADD (266) 34
    SUB (267) 37
    MUL (268) 35
    DIV (269) 36
    AT (270) 41 42 43 44
    BEGIN_CURLY_BRACKET (271) 2 22
    END_CURLY_BRACKET (272) 3 22
    BEGIN_SQUARE_BRACKET (273) 45
    END_SQUARE_BRACKET (274) 45
    BEGIN_PARANTHESIS (275) 32
    END_PARANTHESIS (276) 32
    IF (277) 13
    EQUAL (278) 20 21
    SEMICOLON (279) 17 20 21 22 23
    STRING (280) 17


Nonterminals, with rules where they appear

    $accept (26)
        on left: 0
    program (27)
        on left: 1
        on right: 0
    block_begin (28)
        on left: 2
        on right: 4
    block_end (29)
        on left: 3
        on right: 4
    block (30)
        on left: 4
        on right: 1 14 16
    statement_list (31)
        on left: 5 6
        on right: 4 5
    statement (32)
        on left: 7 8 9 10 11 12
        on right: 5 6
    if_begin (33)
        on left: 13
        on right: 14
    conditional_statement (34)
        on left: 14
        on right: 7
    loop_begin (35)
        on left: 15
        on right: 16
    loop_statement (36)
        on left: 16
        on right: 8
    print_statement (37)
        on left: 17
        on right: 9
    argument_list (38)
        on left: 18 19
        on right: 17 18
    equal_statement (39)
        on left: 20 21
        on right: 10
    vec_statement (40)
        on left: 22
        on right: 11
    scl_statement (41)
        on left: 23
        on right: 12
    expr (42)
        on left: 24 25 26 27 28 29 30 31 32 33
        on right: 13 15 18 19 20 21 32 34 35 36 37 38
    add_expr (43)
        on left: 34
        on right: 24
    mul_expr (44)
        on left: 35
        on right: 25
    div_expr (45)
        on left: 36
        on right: 27
    sub_expr (46)
        on left: 37
        on right: 26
    index_expr (47)
        on left: 38
        on right: 28
    index (48)
        on left: 39 40
        on right: 21
    prod_expr (49)
        on left: 41 42 43 44
        on right: 30
    vector (50)
        on left: 45
        on right: 29 41 42 43
    num_list (51)
        on left: 46 47
        on right: 45 46


State 0

    0 $accept: • program $end

    BEGIN_CURLY_BRACKET  shift, and go to state 1

    program      go to state 2
    block_begin  go to state 3
    block        go to state 4


State 1

    2 block_begin: BEGIN_CURLY_BRACKET •

    $default  reduce using rule 2 (block_begin)


State 2

    0 $accept: program • $end

    $end  shift, and go to state 5


State 3

    4 block: block_begin • statement_list block_end

    PRINT       shift, and go to state 6
    LOOP        shift, and go to state 7
    SCL         shift, and go to state 8
    VEC         shift, and go to state 9
    IDENTIFIER  shift, and go to state 10
    IF          shift, and go to state 11

    statement_list         go to state 12
    statement              go to state 13
    if_begin               go to state 14
    conditional_statement  go to state 15
    loop_begin             go to state 16
    loop_statement         go to state 17
    print_statement        go to state 18
    equal_statement        go to state 19
    vec_statement          go to state 20
    scl_statement          go to state 21


State 4

    1 program: block •

    $default  reduce using rule 1 (program)


State 5

    0 $accept: program $end •

    $default  accept


State 6

   17 print_statement: PRINT • STRING COLON argument_list SEMICOLON

    STRING  shift, and go to state 22


State 7

   15 loop_begin: LOOP • expr

    NUMBER                shift, and go to state 23
    IDENTIFIER            shift, and go to state 24
    BEGIN_SQUARE_BRACKET  shift, and go to state 25
    BEGIN_PARANTHESIS     shift, and go to state 26

    expr        go to state 27
    add_expr    go to state 28
    mul_expr    go to state 29
    div_expr    go to state 30
    sub_expr    go to state 31
    index_expr  go to state 32
    prod_expr   go to state 33
    vector      go to state 34


State 8

   23 scl_statement: SCL • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 35


State 9

   22 vec_statement: VEC • IDENTIFIER BEGIN_CURLY_BRACKET NUMBER END_CURLY_BRACKET SEMICOLON

    IDENTIFIER  shift, and go to state 36


State 10

   20 equal_statement: IDENTIFIER • EQUAL expr SEMICOLON
   21                | IDENTIFIER • COLON index EQUAL expr SEMICOLON

    COLON  shift, and go to state 37
    EQUAL  shift, and go to state 38


State 11

   13 if_begin: IF • expr

    NUMBER                shift, and go to state 23
    IDENTIFIER            shift, and go to state 24
    BEGIN_SQUARE_BRACKET  shift, and go to state 25
    BEGIN_PARANTHESIS     shift, and go to state 26

    expr        go to state 39
    add_expr    go to state 28
    mul_expr    go to state 29
    div_expr    go to state 30
    sub_expr    go to state 31
    index_expr  go to state 32
    prod_expr   go to state 33
    vector      go to state 34


State 12

    4 block: block_begin statement_list • block_end
    5 statement_list: statement_list • statement

    PRINT              shift, and go to state 6
    LOOP               shift, and go to state 7
    SCL                shift, and go to state 8
    VEC                shift, and go to state 9
    IDENTIFIER         shift, and go to state 10
    END_CURLY_BRACKET  shift, and go to state 40
    IF                 shift, and go to state 11

    block_end              go to state 41
    statement              go to state 42
    if_begin               go to state 14
    conditional_statement  go to state 15
    loop_begin             go to state 16
    loop_statement         go to state 17
    print_statement        go to state 18
    equal_statement        go to state 19
    vec_statement          go to state 20
    scl_statement          go to state 21


State 13

    6 statement_list: statement •

    $default  reduce using rule 6 (statement_list)


State 14

   14 conditional_statement: if_begin • block

    BEGIN_CURLY_BRACKET  shift, and go to state 1

    block_begin  go to state 3
    block        go to state 43


State 15

    7 statement: conditional_statement •

    $default  reduce using rule 7 (statement)


State 16

   16 loop_statement: loop_begin • block

    BEGIN_CURLY_BRACKET  shift, and go to state 1

    block_begin  go to state 3
    block        go to state 44


State 17

    8 statement: loop_statement •

    $default  reduce using rule 8 (statement)


State 18

    9 statement: print_statement •

    $default  reduce using rule 9 (statement)


State 19

   10 statement: equal_statement •

    $default  reduce using rule 10 (statement)


State 20

   11 statement: vec_statement •

    $default  reduce using rule 11 (statement)


State 21

   12 statement: scl_statement •

    $default  reduce using rule 12 (statement)


State 22

   17 print_statement: PRINT STRING • COLON argument_list SEMICOLON

    COLON  shift, and go to state 45


State 23

   31 expr: NUMBER •

    $default  reduce using rule 31 (expr)


State 24

   33 expr: IDENTIFIER •
   43 prod_expr: IDENTIFIER • AT vector
   44          | IDENTIFIER • AT IDENTIFIER

    AT  shift, and go to state 46

    $default  reduce using rule 33 (expr)


State 25

   45 vector: BEGIN_SQUARE_BRACKET • num_list END_SQUARE_BRACKET

    NUMBER  shift, and go to state 47

    num_list  go to state 48


State 26

   32 expr: BEGIN_PARANTHESIS • expr END_PARANTHESIS

    NUMBER                shift, and go to state 23
    IDENTIFIER            shift, and go to state 24
    BEGIN_SQUARE_BRACKET  shift, and go to state 25
    BEGIN_PARANTHESIS     shift, and go to state 26

    expr        go to state 49
    add_expr    go to state 28
    mul_expr    go to state 29
    div_expr    go to state 30
    sub_expr    go to state 31
    index_expr  go to state 32
    prod_expr   go to state 33
    vector      go to state 34


State 27

   15 loop_begin: LOOP expr •
   34 add_expr: expr • ADD expr
   35 mul_expr: expr • MUL expr
   36 div_expr: expr • DIV expr
   37 sub_expr: expr • SUB expr
   38 index_expr: expr • COLON expr

    COLON  shift, and go to state 50
    ADD    shift, and go to state 51
    SUB    shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54

    $default  reduce using rule 15 (loop_begin)


State 28

   24 expr: add_expr •

    $default  reduce using rule 24 (expr)


State 29

   25 expr: mul_expr •

    $default  reduce using rule 25 (expr)


State 30

   27 expr: div_expr •

    $default  reduce using rule 27 (expr)


State 31

   26 expr: sub_expr •

    $default  reduce using rule 26 (expr)


State 32

   28 expr: index_expr •

    $default  reduce using rule 28 (expr)


State 33

   30 expr: prod_expr •

    $default  reduce using rule 30 (expr)


State 34

   29 expr: vector •
   41 prod_expr: vector • AT vector
   42          | vector • AT IDENTIFIER

    AT  shift, and go to state 55

    $default  reduce using rule 29 (expr)


State 35

   23 scl_statement: SCL IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 56


State 36

   22 vec_statement: VEC IDENTIFIER • BEGIN_CURLY_BRACKET NUMBER END_CURLY_BRACKET SEMICOLON

    BEGIN_CURLY_BRACKET  shift, and go to state 57


State 37

   21 equal_statement: IDENTIFIER COLON • index EQUAL expr SEMICOLON

    NUMBER      shift, and go to state 58
    IDENTIFIER  shift, and go to state 59

    index  go to state 60


State 38

   20 equal_statement: IDENTIFIER EQUAL • expr SEMICOLON

    NUMBER                shift, and go to state 23
    IDENTIFIER            shift, and go to state 24
    BEGIN_SQUARE_BRACKET  shift, and go to state 25
    BEGIN_PARANTHESIS     shift, and go to state 26

    expr        go to state 61
    add_expr    go to state 28
    mul_expr    go to state 29
    div_expr    go to state 30
    sub_expr    go to state 31
    index_expr  go to state 32
    prod_expr   go to state 33
    vector      go to state 34


State 39

   13 if_begin: IF expr •
   34 add_expr: expr • ADD expr
   35 mul_expr: expr • MUL expr
   36 div_expr: expr • DIV expr
   37 sub_expr: expr • SUB expr
   38 index_expr: expr • COLON expr

    COLON  shift, and go to state 50
    ADD    shift, and go to state 51
    SUB    shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54

    $default  reduce using rule 13 (if_begin)


State 40

    3 block_end: END_CURLY_BRACKET •

    $default  reduce using rule 3 (block_end)


State 41

    4 block: block_begin statement_list block_end •

    $default  reduce using rule 4 (block)


State 42

    5 statement_list: statement_list statement •

    $default  reduce using rule 5 (statement_list)


State 43

   14 conditional_statement: if_begin block •

    $default  reduce using rule 14 (conditional_statement)


State 44

   16 loop_statement: loop_begin block •

    $default  reduce using rule 16 (loop_statement)


State 45

   17 print_statement: PRINT STRING COLON • argument_list SEMICOLON

    NUMBER                shift, and go to state 23
    IDENTIFIER            shift, and go to state 24
    BEGIN_SQUARE_BRACKET  shift, and go to state 25
    BEGIN_PARANTHESIS     shift, and go to state 26

    argument_list  go to state 62
    expr           go to state 63
    add_expr       go to state 28
    mul_expr       go to state 29
    div_expr       go to state 30
    sub_expr       go to state 31
    index_expr     go to state 32
    prod_expr      go to state 33
    vector         go to state 34


State 46

   43 prod_expr: IDENTIFIER AT • vector
   44          | IDENTIFIER AT • IDENTIFIER

    IDENTIFIER            shift, and go to state 64
    BEGIN_SQUARE_BRACKET  shift, and go to state 25

    vector  go to state 65


State 47

   47 num_list: NUMBER •

    $default  reduce using rule 47 (num_list)


State 48

   45 vector: BEGIN_SQUARE_BRACKET num_list • END_SQUARE_BRACKET
   46 num_list: num_list • COMMA NUMBER

    COMMA               shift, and go to state 66
    END_SQUARE_BRACKET  shift, and go to state 67


State 49

   32 expr: BEGIN_PARANTHESIS expr • END_PARANTHESIS
   34 add_expr: expr • ADD expr
   35 mul_expr: expr • MUL expr
   36 div_expr: expr • DIV expr
   37 sub_expr: expr • SUB expr
   38 index_expr: expr • COLON expr

    COLON            shift, and go to state 50
    ADD              shift, and go to state 51
    SUB              shift, and go to state 52
    MUL              shift, and go to state 53
    DIV              shift, and go to state 54
    END_PARANTHESIS  shift, and go to state 68


State 50

   38 index_expr: expr COLON • expr

    NUMBER                shift, and go to state 23
    IDENTIFIER            shift, and go to state 24
    BEGIN_SQUARE_BRACKET  shift, and go to state 25
    BEGIN_PARANTHESIS     shift, and go to state 26

    expr        go to state 69
    add_expr    go to state 28
    mul_expr    go to state 29
    div_expr    go to state 30
    sub_expr    go to state 31
    index_expr  go to state 32
    prod_expr   go to state 33
    vector      go to state 34


State 51

   34 add_expr: expr ADD • expr

    NUMBER                shift, and go to state 23
    IDENTIFIER            shift, and go to state 24
    BEGIN_SQUARE_BRACKET  shift, and go to state 25
    BEGIN_PARANTHESIS     shift, and go to state 26

    expr        go to state 70
    add_expr    go to state 28
    mul_expr    go to state 29
    div_expr    go to state 30
    sub_expr    go to state 31
    index_expr  go to state 32
    prod_expr   go to state 33
    vector      go to state 34


State 52

   37 sub_expr: expr SUB • expr

    NUMBER                shift, and go to state 23
    IDENTIFIER            shift, and go to state 24
    BEGIN_SQUARE_BRACKET  shift, and go to state 25
    BEGIN_PARANTHESIS     shift, and go to state 26

    expr        go to state 71
    add_expr    go to state 28
    mul_expr    go to state 29
    div_expr    go to state 30
    sub_expr    go to state 31
    index_expr  go to state 32
    prod_expr   go to state 33
    vector      go to state 34


State 53

   35 mul_expr: expr MUL • expr

    NUMBER                shift, and go to state 23
    IDENTIFIER            shift, and go to state 24
    BEGIN_SQUARE_BRACKET  shift, and go to state 25
    BEGIN_PARANTHESIS     shift, and go to state 26

    expr        go to state 72
    add_expr    go to state 28
    mul_expr    go to state 29
    div_expr    go to state 30
    sub_expr    go to state 31
    index_expr  go to state 32
    prod_expr   go to state 33
    vector      go to state 34


State 54

   36 div_expr: expr DIV • expr

    NUMBER                shift, and go to state 23
    IDENTIFIER            shift, and go to state 24
    BEGIN_SQUARE_BRACKET  shift, and go to state 25
    BEGIN_PARANTHESIS     shift, and go to state 26

    expr        go to state 73
    add_expr    go to state 28
    mul_expr    go to state 29
    div_expr    go to state 30
    sub_expr    go to state 31
    index_expr  go to state 32
    prod_expr   go to state 33
    vector      go to state 34


State 55

   41 prod_expr: vector AT • vector
   42          | vector AT • IDENTIFIER

    IDENTIFIER            shift, and go to state 74
    BEGIN_SQUARE_BRACKET  shift, and go to state 25

    vector  go to state 75


State 56

   23 scl_statement: SCL IDENTIFIER SEMICOLON •

    $default  reduce using rule 23 (scl_statement)


State 57

   22 vec_statement: VEC IDENTIFIER BEGIN_CURLY_BRACKET • NUMBER END_CURLY_BRACKET SEMICOLON

    NUMBER  shift, and go to state 76


State 58

   39 index: NUMBER •

    $default  reduce using rule 39 (index)


State 59

   40 index: IDENTIFIER •

    $default  reduce using rule 40 (index)


State 60

   21 equal_statement: IDENTIFIER COLON index • EQUAL expr SEMICOLON

    EQUAL  shift, and go to state 77


State 61

   20 equal_statement: IDENTIFIER EQUAL expr • SEMICOLON
   34 add_expr: expr • ADD expr
   35 mul_expr: expr • MUL expr
   36 div_expr: expr • DIV expr
   37 sub_expr: expr • SUB expr
   38 index_expr: expr • COLON expr

    COLON      shift, and go to state 50
    ADD        shift, and go to state 51
    SUB        shift, and go to state 52
    MUL        shift, and go to state 53
    DIV        shift, and go to state 54
    SEMICOLON  shift, and go to state 78


State 62

   17 print_statement: PRINT STRING COLON argument_list • SEMICOLON
   18 argument_list: argument_list • COMMA expr

    COMMA      shift, and go to state 79
    SEMICOLON  shift, and go to state 80


State 63

   19 argument_list: expr •
   34 add_expr: expr • ADD expr
   35 mul_expr: expr • MUL expr
   36 div_expr: expr • DIV expr
   37 sub_expr: expr • SUB expr
   38 index_expr: expr • COLON expr

    COLON  shift, and go to state 50
    ADD    shift, and go to state 51
    SUB    shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54

    $default  reduce using rule 19 (argument_list)


State 64

   44 prod_expr: IDENTIFIER AT IDENTIFIER •

    $default  reduce using rule 44 (prod_expr)


State 65

   43 prod_expr: IDENTIFIER AT vector •

    $default  reduce using rule 43 (prod_expr)


State 66

   46 num_list: num_list COMMA • NUMBER

    NUMBER  shift, and go to state 81


State 67

   45 vector: BEGIN_SQUARE_BRACKET num_list END_SQUARE_BRACKET •

    $default  reduce using rule 45 (vector)


State 68

   32 expr: BEGIN_PARANTHESIS expr END_PARANTHESIS •

    $default  reduce using rule 32 (expr)


State 69

   34 add_expr: expr • ADD expr
   35 mul_expr: expr • MUL expr
   36 div_expr: expr • DIV expr
   37 sub_expr: expr • SUB expr
   38 index_expr: expr • COLON expr
   38           | expr COLON expr •

    $default  reduce using rule 38 (index_expr)


State 70

   34 add_expr: expr • ADD expr
   34         | expr ADD expr •
   35 mul_expr: expr • MUL expr
   36 div_expr: expr • DIV expr
   37 sub_expr: expr • SUB expr
   38 index_expr: expr • COLON expr

    COLON  shift, and go to state 50
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54

    $default  reduce using rule 34 (add_expr)


State 71

   34 add_expr: expr • ADD expr
   35 mul_expr: expr • MUL expr
   36 div_expr: expr • DIV expr
   37 sub_expr: expr • SUB expr
   37         | expr SUB expr •
   38 index_expr: expr • COLON expr

    COLON  shift, and go to state 50
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54

    $default  reduce using rule 37 (sub_expr)


State 72

   34 add_expr: expr • ADD expr
   35 mul_expr: expr • MUL expr
   35         | expr MUL expr •
   36 div_expr: expr • DIV expr
   37 sub_expr: expr • SUB expr
   38 index_expr: expr • COLON expr

    COLON  shift, and go to state 50

    $default  reduce using rule 35 (mul_expr)


State 73

   34 add_expr: expr • ADD expr
   35 mul_expr: expr • MUL expr
   36 div_expr: expr • DIV expr
   36         | expr DIV expr •
   37 sub_expr: expr • SUB expr
   38 index_expr: expr • COLON expr

    COLON  shift, and go to state 50

    $default  reduce using rule 36 (div_expr)


State 74

   42 prod_expr: vector AT IDENTIFIER •

    $default  reduce using rule 42 (prod_expr)


State 75

   41 prod_expr: vector AT vector •

    $default  reduce using rule 41 (prod_expr)


State 76

   22 vec_statement: VEC IDENTIFIER BEGIN_CURLY_BRACKET NUMBER • END_CURLY_BRACKET SEMICOLON

    END_CURLY_BRACKET  shift, and go to state 82


State 77

   21 equal_statement: IDENTIFIER COLON index EQUAL • expr SEMICOLON

    NUMBER                shift, and go to state 23
    IDENTIFIER            shift, and go to state 24
    BEGIN_SQUARE_BRACKET  shift, and go to state 25
    BEGIN_PARANTHESIS     shift, and go to state 26

    expr        go to state 83
    add_expr    go to state 28
    mul_expr    go to state 29
    div_expr    go to state 30
    sub_expr    go to state 31
    index_expr  go to state 32
    prod_expr   go to state 33
    vector      go to state 34


State 78

   20 equal_statement: IDENTIFIER EQUAL expr SEMICOLON •

    $default  reduce using rule 20 (equal_statement)


State 79

   18 argument_list: argument_list COMMA • expr

    NUMBER                shift, and go to state 23
    IDENTIFIER            shift, and go to state 24
    BEGIN_SQUARE_BRACKET  shift, and go to state 25
    BEGIN_PARANTHESIS     shift, and go to state 26

    expr        go to state 84
    add_expr    go to state 28
    mul_expr    go to state 29
    div_expr    go to state 30
    sub_expr    go to state 31
    index_expr  go to state 32
    prod_expr   go to state 33
    vector      go to state 34


State 80

   17 print_statement: PRINT STRING COLON argument_list SEMICOLON •

    $default  reduce using rule 17 (print_statement)


State 81

   46 num_list: num_list COMMA NUMBER •

    $default  reduce using rule 46 (num_list)


State 82

   22 vec_statement: VEC IDENTIFIER BEGIN_CURLY_BRACKET NUMBER END_CURLY_BRACKET • SEMICOLON

    SEMICOLON  shift, and go to state 85


State 83

   21 equal_statement: IDENTIFIER COLON index EQUAL expr • SEMICOLON
   34 add_expr: expr • ADD expr
   35 mul_expr: expr • MUL expr
   36 div_expr: expr • DIV expr
   37 sub_expr: expr • SUB expr
   38 index_expr: expr • COLON expr

    COLON      shift, and go to state 50
    ADD        shift, and go to state 51
    SUB        shift, and go to state 52
    MUL        shift, and go to state 53
    DIV        shift, and go to state 54
    SEMICOLON  shift, and go to state 86


State 84

   18 argument_list: argument_list COMMA expr •
   34 add_expr: expr • ADD expr
   35 mul_expr: expr • MUL expr
   36 div_expr: expr • DIV expr
   37 sub_expr: expr • SUB expr
   38 index_expr: expr • COLON expr

    COLON  shift, and go to state 50
    ADD    shift, and go to state 51
    SUB    shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54

    $default  reduce using rule 18 (argument_list)


State 85

   22 vec_statement: VEC IDENTIFIER BEGIN_CURLY_BRACKET NUMBER END_CURLY_BRACKET SEMICOLON •

    $default  reduce using rule 22 (vec_statement)


State 86

   21 equal_statement: IDENTIFIER COLON index EQUAL expr SEMICOLON •

    $default  reduce using rule 21 (equal_statement)
